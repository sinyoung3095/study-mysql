MySQL
   웹 사이트와 다양한 애플리케이션에서 사용되는 DBMS이다.
   Oracle은 관리 비용이 고가이지만 MySQL은 저가형 데이터베이스다.
   문법이 간결하고 쉬우며, 메모리 사용량이 현저히 낮아서 부담없이 사용 가능하다.

MySQL 설치
   https://drive.google.com/file/d/1OkSYmK7GIrbHa5vFceGaji4H4QWaa8Sn/view?usp=drive_link

MySQL 기초 문법
   - 로그인
      > mysql -u root -p
      > 1234

   - 사용 가능한 데이터베이스 목록 조회
      > show databases;

   - 데이터베이스 생성
      create database [데이터베이스명];

   - 사용할 데이터베이스 선택
      use [데이터베이스명];

   - 사용 가능한 계정 목록 조회
      > select user, host from user;

   - 로컬에서만 접속 가능한 계정 생성
      > create user '계정명'@localhost identified by '비밀번호';
      
   - 원격에서도 접속 가능한 계정 생성
      > create user '계정명'@'%' identified by '비밀번호';

   - 사용자 비밀번호 변경
      > set password for '계정명'@'%' = '신규비밀번호';

   - 사용자 삭제
      > drop user '계정명'@localhost;
      > drop user '계정명'@'%';
   
   - 연결 권한
      > grant all privileges on *.* to '계정명'@'%' with grant option;

   - 권한 관련 명령어 확정
      > flush privileges;

IDE 설치 - DBeaver
   https://drive.google.com/file/d/1DATzZoOAUJAZOvkTlzJagLcYLFt0-DuU/view?usp=sharing
==================================================================================
DBMS의 소통 방식

----------------------------------------------------------------------------------
         사용자
----------------------------------------------------------------------------------
   ↕         ↕      ↕
고객 관리 응용프로그램   ↕   주문 관리 응용프로그램
   ↕         ↕      ↕
----------------------------------------------------------------------------------
         DBMS
----------------------------------------------------------------------------------

RDBMS(관계형 데이터베이스 시스템)


   Table A               Table B

   번호   이름   나이   아이디      주문번호      번호   날짜      상품수량
   1   한동석   20   hds1234      20250702001   2   2025-07-02   3
   2   구민경   21   kmk0000      20250702002   5   2025-07-02   100
   3   정희준   22   jhj9999      20250703001   5   2025-07-03   34
   5   조영인   23   jyi7777      20250702003   3   2025-07-02   25

   이러한 구조를 가지는 것을 Table, Class라고 부른다.

   Column(열, 속성, 필드)
      공통된 값들의 주제
   
   Row(행, 튜플, 레코드)
      하나의 정보

   Primary Key(PK)
      고유한 값.
      각 행의 구분점으로 사용된다.
      중복이 없고 NULL값을 허용하지 않는다.
      *NULL: 아직 어떤 값을 넣을지 모르겠다는 의미로 넣는 값.

   Foreign key(FK)
      다른 테이블의 PK를 의미한다.
      보통 테이블끼리 관계를 맺을 때 사용한다.
      중복이 가능하다.

   Uique key(UK)
      NULL은 허용하지만 중복은 허용하지 않는다.
--------------------------------------------------------------------------------------------------------------------------
컴파일 언어와 스크립트 언어

   - 컴파일 언어
      파일 단위로 해석한다(일괄처리)
      수정이 거의 없을 때 효율적이다.

   - 스크립트 언어
      한 줄 단위로 해석한다(개별처리)
      빈번한 수정 시 효율적이다.


SQL문(쿼리문) - DDL, DML, DCL, TCL
   DBMS와 소통할 수 있는 언어이다.
   스크립트 언어이다.

자료형
   - 정수
      tinyint
      smallint
      mediumint
      int
      bigint

   - 실수
      decimal(m, d): m자리 정수, d자리 소수점으로 표현

   - 날짜
      date
      time
      datetime

   - 문자
      char(m): 고정 길이 문자열(0 ~ 255)
      varchar(m): 가변 길이 문자열(0~65535)

DDL (Data Definition Language): 데이터 정의어
   테이블 조작, 제어 관련 쿼리문

   1. create
      create table [테이블명]([컬럼명] [자료형([용량])] [제약조건], ...);

   2. drop
      drop table [테이블명];

   3. alter
      - 테이블명 수정
         alter table [테이블명] rename [새로운 테이블명]
      - 컬럼 맨 뒤에 추가
         alter table [테이블명] add [컬럼명] [자료형] [제약조건];
      - 컬럼 맨 앞에 추가
         alter table [테이블명] add [컬럼명] [자료형] [제약조건] first;
      - 컬럼 지정 위치에 추가
         alter table [테이블명] add [컬럼명] [자료형] [제약조건] after [기존 컬럼명];
      - 컬럼 삭제
         alter table [테이블명] drop [컬럼명];
      - 컬럼명 변경
         alter table [테이블명] change [기존컬럼명] [변경할 컬럼명] [컬럼타입];
      - 컬럼 타입 변경
         alter table [테이블명] modify [컬럼명] [변경할 컬럼타입];
      - 제약 조건 확인
         desc [데이터베이스명].[테이블명];
      - 제약 조건 추가
         alter table [테이블명] add constraint [제약조건 이름];
      - 제약 조건 삭제
         alter table [테이블명] drop constraint [제약조건 이름];
      - PK 삭제
         alter table [테이블명] drop primary key;

   4. truncate
      truncate table [테이블명];
=================================================================================
무결성
   데이터의 정확성, 일관성, 유효성이 유지되는 것.

   정확성: 데이터가 애매하지 않아야 한다.
   일관성: 각 사용자가 일관된 데이터를 볼 수 있도록 해야한다.
   유효성: 데이터가 실제 존재하는 데이터여야 한다.

   1. 개체 무결성
      모든 테이블은 PK로 선택된 컬럼을 가져야 한다.

   2. 참조 무결성
      두 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것.

   3. 도메인 무결성
      컬럼의 타입, NULL값의 허용 등에 대한 사항을 정의하고
      올바른 데이터가 입력되었는지를 확인하는 것.
----------------------------------------------------------------------------------------------------------------------------------
모델링(기획)
   추상적인 주제를 RDB에 맞게 설계하는 작업

   1. 요구사항 분석
      회원, 주문, 상품: 3가지를 관리하고자 한다.

   2. 개념적 설계
      회원      주문      상품
      
      번호      번호      번호
      이메일      날짜      이름
      비밀번호      회원번호      가격
      이름      상품번호      재고
      주소
      생일
      

   3. 논리적 설계(논리 모델링)
      회원      주문      상품
      ---------------------------------------------------
      번호P      번호P      번호P
      ---------------------------------------------------
      이메일U NN   날짜 D(CT)   이름 NN
      비밀번호   NN   회원번호 F   가격 D(0)
      이름 NN      상품번호   F   재고 D(0)
      주소 NN
      생일      

   4. 물리적 설계(물리 모델링)
      tbl_member
      --------------------------------------------------------------
      id: bigint unsigned primary key
      --------------------------------------------------------------      
      member_email: varchar(255) unique not null
      member_password: varchar(255) not null
      member_name: varchar(255) not null
      member_address: varchar(255) not null
      member_birth date

   5. 구현
=====================================================================================
정규화
   삽입/수정/삭제 이상 현상을 제거하기 위한 작업.
   데이터 중복 최소화에 목적이 있다.
   5차 정규화까지 있으나 3차 정규화까지만 진행한다.

1차 정규화
   같은 내용의 컬럼이 연속적으로 나타날 경우

   상품 테이블
   상품명1      상품명2      상품명3
   와이셔츠1   와이셔츠2   와이셔츠3

   * 조회 및 추가가 힘들다.

   1차 정규화 진행

   상품 테이블
   상품명
   와이셔츠1
   와이셔츠2
   와이셔츠3

2차 정규화
   조합키(복합키)로 구성되었을 경우 조합키의 일부에만 종속되는 속성이 있을 경우(부분 종속).

   꽃
   이름   색상   꽃말   과
   해바라기   노란색   행운   국화
   장미   빨간색   사랑   장미


   * 이름에 대한 부분 종속이 발생한다.

   2차 정규화 진행

   꽃
   이름   색상   꽃말
   해바라기   노란색   행운
   장미   빨간색   사랑

   과
   이름   과
   해바라기   국화
   장미   장미

3차 정규화
   PK가 아닌 컬럼이 다른 컬럼을 결정하는 경우
   이행 종속 제거


   회원번호   이름   시   구   동   우편번호
   1   한동석   서울시   강남구   역삼동   12345
   2   홍길동   서울시   관악구   봉천동   78945
   3   이순신   남양주   화도읍   구암리   77744

   * 우편번호로 시, 구, 동을 알 수 있다.
   * 중복된 데이터가 생길 가능성이 있다.

   3차 정규화 진행

   회원번호   이름   우편번호
   1   한동석   12345
   2   홍길동   78945
   3   이순신   77744

   우편번호      시   구   동
   12345      서울시   강남구   역삼동
   78945      서울시   관악구   봉천동
   77744      남양주   화도읍   구암리

데이터베이스에서 정규화가 필요한 이유
   데이터베이스를 잘못 설계하면 불필요한 데이터 중복으로 인해 공간이 낭비된다.
   이런 현상을 이상(Anomaly)현상이라고 한다.


   회원번호와 프로젝트코드 두 컬럼의 조합키로 설정되어 있는 테이블이고
   한 사람은 하나의 부서만 가질 수 있다.

   회원번호      이름   부서   프로젝트코드   급여   부서별 명수
   22080101   한동석   개발팀   ABC0001      3000   4
   22080101   한동석   개발팀   DEF1112      2000   4
   22080101   한동석   개발팀   CBA9474      4000   4
   22080104   홍길동   기획팀   EFG0881      5000   2
   22081106   이순신   디자인팀   GHI9991      6000   3

이상현상의 종류
   1. 삽입 이상
      새로운 데이터를 삽입하기 위해서 불필요한 데이터도 삽입해야하는 문제

      담당 프로젝트가 정해지지 않은 사원이 있다면,
      프로젝트 코드에 NULL을 작성할 수 없으므로 이 사원은 테이블에 추가될 수 없다.
      따라서 '미정'이라는 프로젝트 코드를 따로 만들어서 삽입해야 한다.

   2. 갱신 이상
      중복 행 중에서 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제

      한 명의 사원은 반드시 하나의 부서에만 속할 수 있다.
      만약 "한동석"이 보안팀으로 부서를 옮길 시 3개 모두 갱신해주지 않는다면
      개발팀인지 보안팀인지 알 수 없다.

   3. 삭제 이상
      행을 삭제하면 꼭 필요한 데이터까지 함게 삭제되는 문제

      "이순신"이 담당한 프로젝트를 박살내서 드랍된다면 "이순신" 행을 모두 삭제하게 된다.
      따라서 프로젝트에서 드랍되면 정보를 모두 드랍하게 된다.

정규화 진행
   
   회원번호      프로젝트코드   급여
   22080101   ABC0001      3000
   22080101   DEF1112      2000
   22080101   CBA9474      4000
   22080104   EFG0881      5000
   22081106   GHI9991      6000

   회원번호      이름      부서
   22080101   한동석      개발팀
   22080104   홍길동      기획팀
   22081106   이순신      디자인팀

   부서   부서별명수
   개발팀   4
   기획팀   2
   디자인팀   3


============================================================
DML(Data Manipulation Language): 데이터 조작어
   1. select : 조회(검색)
      select 컬럼명1, 컬럼명, ...
      from 테이블명
      where 조건식
      
   2. insert : 추가
      1) 컬럼을 생략할 수 있다, 이 때 default 제약조건이 발동된다.
      isnert into [테이블명]
      ([컬럼명1], [컬럼명2], ...)
      values([값1], [값2], ...)

      2)모든 값을 전부 작성해di되며, 컬럼명은 직접 작성하지 않는다.
      insert into [테이블명]
      values([값1], [값2], ...)

   3. update : 수정
      update [테이블명]
      set [기존 컬럼명1] = [새로운 값1], [기존 컬럼명2] = [새로운 값2], ....
      where [조건식]

   4. DELETE : 삭제
      DELETE FROM [테이블명]

   조건식 : 참 또는 거짓 둘 중 하나가 나오는 식
   
      >, <      : 초과, 미만
      >=, <=      : 이상, 이하
      =      : 같다
      <>, !=, ^=   : 같지 않다
      and      : 둘 다 참이면 참
      or      : 둘 중 하나라도 참이면 참

   ※ 위 연산자들은 WHERE 절에서 사용 가능하다.
============================================================
JOIN

		여러 테이블에 흩어져 있는 정보 중
		사용자가 필요한 정보만 가져와서 가상의 테이블처럼 만들고 결과를 보여주는 것.
		정규화를 통해 조화 테이블이 너무 많이 쪼개져 있으면 작업이 불편하기 때문에	
		이를 JOIN으로 해결할 수 있다.
		
		1. 내부 조인
				- 등가 조인
						on절의 조건식에 등호가 있는 조인
				- 비등가 조인
						on절의 조건식에 등호가 없는 조인
				[선행 테이블] inner join [후행 테이블]
				on 조건식

				[선행 테이블] join [후행 테이블]
				on 조건식
	
		2. 외부 조인
				조건이 일치하지 않아도 원하는 테이블은 모두 조회
				- 선행 테이블의 정보는 전체 조회
					[선행 테이블] left outer join[후행 테이블] on [조건식]
				- 후행 테이블의 정보는 전체 조회
					[선행 테이블] right outer join[후행 테이블] on [조건식]
=============================================================
TCL(Transaction Control Language): 트랜잭션 제어어

		트랜잭셔이란, 하나의 서비스를 위한 DML의 묶음 혹은 작업 단위이다.
		
		예를 들어, "상품 구매시 포인트 적입" 서비스는 "상품 구매 서비스"이다.
		이 서비스에 필요한 최소 DML 개수는 2개(INSERT, UPDATE)이다.
		그렇다면 상품 구매 서비스의 트랜잭션은 INSERT와 UPDATE 이다.
		이 떄, INSERT는 잘 되었어도 UPDATE에서 문제가 발생하면,
		다시 INSERT를 복고해줘야 하기 떄문에 TCL 명령어를 배워야 한다.

		commit
			현재 트랜잭션의 모든 작업을 확정하는 명령어
		
		rollback
			이전 커밋한 지점으로 이동하는 명령어
		
		※ DML
=============================================================
VIEW
	
		기존의 테이블은 그대로 나둔채 필요한 컬럼들 및 새로운 컬럼들을 만든 가상 테이블.
		실제 데이터가 저장되는 것은 아니지만 VIEW를 통해서 충분히 데이터 관리를할 수 있다.

		- 독립성: 다른 곳에서 접근하지 못하도록 하는 성질
		- 편리성: 긴 쿼리문을 잛게 만드는 성질
		- 보안성: 기존의 쿼리문이 보이지 않는다.

VIEW 문법
		
		- 새롭게 생성
				create view [뷰 이름] as (select 쿼리문);

		- 새롭게 생성 혹은 기존 view 수정
				create or replace view [뷰 이름] as (select 쿼리문);








































